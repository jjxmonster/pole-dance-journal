/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MyMovesRouteImport } from './routes/my-moves'
import { Route as CatalogRouteImport } from './routes/catalog'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as MovesSlugRouteImport } from './routes/moves.$slug'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as AuthResetPasswordRouteImport } from './routes/auth/reset-password'
import { Route as AuthOauthCallbackRouteImport } from './routes/auth/oauth-callback'
import { Route as AuthForgotPasswordRouteImport } from './routes/auth/forgot-password'
import { Route as ApiSplatRouteImport } from './routes/api.$'
import { Route as AdminMovesIndexRouteImport } from './routes/admin/moves/index'
import { Route as ApiRpcSplatRouteImport } from './routes/api.rpc.$'
import { Route as AdminMovesNewRouteImport } from './routes/admin/moves/new'

const MyMovesRoute = MyMovesRouteImport.update({
  id: '/my-moves',
  path: '/my-moves',
  getParentRoute: () => rootRouteImport,
} as any)
const CatalogRoute = CatalogRouteImport.update({
  id: '/catalog',
  path: '/catalog',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const MovesSlugRoute = MovesSlugRouteImport.update({
  id: '/moves/$slug',
  path: '/moves/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/auth/reset-password',
  path: '/auth/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthOauthCallbackRoute = AuthOauthCallbackRouteImport.update({
  id: '/auth/oauth-callback',
  path: '/auth/oauth-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSplatRoute = ApiSplatRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminMovesIndexRoute = AdminMovesIndexRouteImport.update({
  id: '/moves/',
  path: '/moves/',
  getParentRoute: () => AdminRoute,
} as any)
const ApiRpcSplatRoute = ApiRpcSplatRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminMovesNewRoute = AdminMovesNewRouteImport.update({
  id: '/moves/new',
  path: '/moves/new',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/catalog': typeof CatalogRoute
  '/my-moves': typeof MyMovesRoute
  '/api/$': typeof ApiSplatRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/oauth-callback': typeof AuthOauthCallbackRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/moves/$slug': typeof MovesSlugRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/moves/new': typeof AdminMovesNewRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/admin/moves': typeof AdminMovesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/catalog': typeof CatalogRoute
  '/my-moves': typeof MyMovesRoute
  '/api/$': typeof ApiSplatRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/oauth-callback': typeof AuthOauthCallbackRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/moves/$slug': typeof MovesSlugRoute
  '/admin': typeof AdminIndexRoute
  '/admin/moves/new': typeof AdminMovesNewRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/admin/moves': typeof AdminMovesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/catalog': typeof CatalogRoute
  '/my-moves': typeof MyMovesRoute
  '/api/$': typeof ApiSplatRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/oauth-callback': typeof AuthOauthCallbackRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/moves/$slug': typeof MovesSlugRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/moves/new': typeof AdminMovesNewRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/admin/moves/': typeof AdminMovesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/catalog'
    | '/my-moves'
    | '/api/$'
    | '/auth/forgot-password'
    | '/auth/oauth-callback'
    | '/auth/reset-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/moves/$slug'
    | '/admin/'
    | '/admin/moves/new'
    | '/api/rpc/$'
    | '/admin/moves'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/catalog'
    | '/my-moves'
    | '/api/$'
    | '/auth/forgot-password'
    | '/auth/oauth-callback'
    | '/auth/reset-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/moves/$slug'
    | '/admin'
    | '/admin/moves/new'
    | '/api/rpc/$'
    | '/admin/moves'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/catalog'
    | '/my-moves'
    | '/api/$'
    | '/auth/forgot-password'
    | '/auth/oauth-callback'
    | '/auth/reset-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/moves/$slug'
    | '/admin/'
    | '/admin/moves/new'
    | '/api/rpc/$'
    | '/admin/moves/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  CatalogRoute: typeof CatalogRoute
  MyMovesRoute: typeof MyMovesRoute
  ApiSplatRoute: typeof ApiSplatRoute
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthOauthCallbackRoute: typeof AuthOauthCallbackRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  MovesSlugRoute: typeof MovesSlugRoute
  ApiRpcSplatRoute: typeof ApiRpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/my-moves': {
      id: '/my-moves'
      path: '/my-moves'
      fullPath: '/my-moves'
      preLoaderRoute: typeof MyMovesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/catalog': {
      id: '/catalog'
      path: '/catalog'
      fullPath: '/catalog'
      preLoaderRoute: typeof CatalogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/moves/$slug': {
      id: '/moves/$slug'
      path: '/moves/$slug'
      fullPath: '/moves/$slug'
      preLoaderRoute: typeof MovesSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/auth/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/oauth-callback': {
      id: '/auth/oauth-callback'
      path: '/auth/oauth-callback'
      fullPath: '/auth/oauth-callback'
      preLoaderRoute: typeof AuthOauthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/moves/': {
      id: '/admin/moves/'
      path: '/moves'
      fullPath: '/admin/moves'
      preLoaderRoute: typeof AdminMovesIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/moves/new': {
      id: '/admin/moves/new'
      path: '/moves/new'
      fullPath: '/admin/moves/new'
      preLoaderRoute: typeof AdminMovesNewRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
  AdminMovesNewRoute: typeof AdminMovesNewRoute
  AdminMovesIndexRoute: typeof AdminMovesIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminMovesNewRoute: AdminMovesNewRoute,
  AdminMovesIndexRoute: AdminMovesIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  CatalogRoute: CatalogRoute,
  MyMovesRoute: MyMovesRoute,
  ApiSplatRoute: ApiSplatRoute,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthOauthCallbackRoute: AuthOauthCallbackRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  MovesSlugRoute: MovesSlugRoute,
  ApiRpcSplatRoute: ApiRpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
