---
description:
globs:
alwaysApply: false
---

## Tech Stack

- Tanstack Start
- TypeScript 5
- React 19
- oRPC
- Tailwind 4
- Shadcn/ui
- Supabase Auth
- Drizzle ORM

## Project Structure

When introducing changes to the project, always follow the directory structure below:

---

- `./src/routes` - routes
- `./src/routes/{pageName}/__components` - specific components for this route
- `./src/routes/__root.tsx` - Root layout
- `./src/orpc/client.ts`: Typed oRPC client used in the frontend.
- `./src/orpc/router/index.ts`: Router composition/registration for oRPC modules.
- `./src/orpc/router/todos.ts`: Example oRPC module declaring queries/mutations.
- `./src/orpc/schema.ts`: Shared schemas/types for oRPC procedures.
- `./src/query-options` - Functions that return React Query Options using queryOptions() (queryFn SHOULD use Server Functions from /fn directory)
- `./src/data-access` - Data Access Layer
- `./src/components` - Reusable React components
- `./src/components/ui` - Shadcn components
- `.src/utils` - shared utility helpers

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Prioritize error handling and edge cases
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
